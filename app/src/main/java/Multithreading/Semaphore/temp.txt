import java.util.concurrent.Semaphore;

public class CircularQueue {
  // the maximum size of the queue
  private final int size;

  // the array used to store the elements in the queue
  private final int[] queue;

  // the head and tail indices of the queue
  private int head = 0;
  private int tail = 0;

  // semaphores to control access to the queue
  private final Semaphore enqueueSemaphore;
  private final Semaphore dequeueSemaphore;

  public CircularQueue(int size) {
    this.size = size;
    queue = new int[size];

    // initialize the semaphores with the maximum number of permits equal to the size of the queue
    enqueueSemaphore = new Semaphore(size);
    dequeueSemaphore = new Semaphore(0);
  }

  // method for adding an element to the queue
  public void enqueue(int element) throws InterruptedException {
    // acquire a permit from the enqueue semaphore
    enqueueSemaphore.acquire();

    // add the element to the queue and update the tail index
    queue[tail] = element;
    tail = (tail + 1) % size;

    // release a permit to the dequeue semaphore
    dequeueSemaphore.release();
  }

  // method for removing an element from the queue
  public int dequeue() throws InterruptedException {
    // acquire a permit from the dequeue semaphore
    dequeueSemaphore.acquire();

    // remove the element from the queue and update the head index
    int element = queue[head];
    head = (head + 1) % size;

    // release a permit to the enqueue semaphore
    enqueueSemaphore.release();

    return element;
  }
}
